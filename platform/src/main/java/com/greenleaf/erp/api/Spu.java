/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.greenleaf.erp.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-02")
public class Spu implements org.apache.thrift.TBase<Spu, Spu._Fields>, java.io.Serializable, Cloneable, Comparable<Spu> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Spu");

  private static final org.apache.thrift.protocol.TField SPU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("spuId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField ATTRS_FIELD_DESC = new org.apache.thrift.protocol.TField("attrs", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField SKUS_FIELD_DESC = new org.apache.thrift.protocol.TField("skus", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField COMMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("comments", org.apache.thrift.protocol.TType.SET, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SpuStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SpuTupleSchemeFactory();

  public int spuId; // required
  public long price; // required
  public boolean weight; // required
  public double size; // required
  public java.util.Map<java.lang.String,java.lang.String> attrs; // required
  public java.util.List<Sku> skus; // required
  public java.lang.String comment; // optional
  public java.util.Set<java.lang.String> comments; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SPU_ID((short)1, "spuId"),
    PRICE((short)2, "price"),
    WEIGHT((short)3, "weight"),
    SIZE((short)4, "size"),
    ATTRS((short)5, "attrs"),
    SKUS((short)6, "skus"),
    COMMENT((short)7, "comment"),
    COMMENTS((short)8, "comments");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SPU_ID
          return SPU_ID;
        case 2: // PRICE
          return PRICE;
        case 3: // WEIGHT
          return WEIGHT;
        case 4: // SIZE
          return SIZE;
        case 5: // ATTRS
          return ATTRS;
        case 6: // SKUS
          return SKUS;
        case 7: // COMMENT
          return COMMENT;
        case 8: // COMMENTS
          return COMMENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SPUID_ISSET_ID = 0;
  private static final int __PRICE_ISSET_ID = 1;
  private static final int __WEIGHT_ISSET_ID = 2;
  private static final int __SIZE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.COMMENT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SPU_ID, new org.apache.thrift.meta_data.FieldMetaData("spuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ATTRS, new org.apache.thrift.meta_data.FieldMetaData("attrs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SKUS, new org.apache.thrift.meta_data.FieldMetaData("skus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Sku.class))));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENTS, new org.apache.thrift.meta_data.FieldMetaData("comments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Spu.class, metaDataMap);
  }

  public Spu() {
  }

  public Spu(
    int spuId,
    long price,
    boolean weight,
    double size,
    java.util.Map<java.lang.String,java.lang.String> attrs,
    java.util.List<Sku> skus,
    java.util.Set<java.lang.String> comments)
  {
    this();
    this.spuId = spuId;
    setSpuIdIsSet(true);
    this.price = price;
    setPriceIsSet(true);
    this.weight = weight;
    setWeightIsSet(true);
    this.size = size;
    setSizeIsSet(true);
    this.attrs = attrs;
    this.skus = skus;
    this.comments = comments;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Spu(Spu other) {
    __isset_bitfield = other.__isset_bitfield;
    this.spuId = other.spuId;
    this.price = other.price;
    this.weight = other.weight;
    this.size = other.size;
    if (other.isSetAttrs()) {
      java.util.Map<java.lang.String,java.lang.String> __this__attrs = new java.util.HashMap<java.lang.String,java.lang.String>(other.attrs);
      this.attrs = __this__attrs;
    }
    if (other.isSetSkus()) {
      java.util.List<Sku> __this__skus = new java.util.ArrayList<Sku>(other.skus.size());
      for (Sku other_element : other.skus) {
        __this__skus.add(new Sku(other_element));
      }
      this.skus = __this__skus;
    }
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
    if (other.isSetComments()) {
      java.util.Set<java.lang.String> __this__comments = new java.util.HashSet<java.lang.String>(other.comments);
      this.comments = __this__comments;
    }
  }

  public Spu deepCopy() {
    return new Spu(this);
  }

  @Override
  public void clear() {
    setSpuIdIsSet(false);
    this.spuId = 0;
    setPriceIsSet(false);
    this.price = 0;
    setWeightIsSet(false);
    this.weight = false;
    setSizeIsSet(false);
    this.size = 0.0;
    this.attrs = null;
    this.skus = null;
    this.comment = null;
    this.comments = null;
  }

  public int getSpuId() {
    return this.spuId;
  }

  public Spu setSpuId(int spuId) {
    this.spuId = spuId;
    setSpuIdIsSet(true);
    return this;
  }

  public void unsetSpuId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPUID_ISSET_ID);
  }

  /** Returns true if field spuId is set (has been assigned a value) and false otherwise */
  public boolean isSetSpuId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPUID_ISSET_ID);
  }

  public void setSpuIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPUID_ISSET_ID, value);
  }

  public long getPrice() {
    return this.price;
  }

  public Spu setPrice(long price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public boolean isWeight() {
    return this.weight;
  }

  public Spu setWeight(boolean weight) {
    this.weight = weight;
    setWeightIsSet(true);
    return this;
  }

  public void unsetWeight() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WEIGHT_ISSET_ID);
  }

  /** Returns true if field weight is set (has been assigned a value) and false otherwise */
  public boolean isSetWeight() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WEIGHT_ISSET_ID);
  }

  public void setWeightIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WEIGHT_ISSET_ID, value);
  }

  public double getSize() {
    return this.size;
  }

  public Spu setSize(double size) {
    this.size = size;
    setSizeIsSet(true);
    return this;
  }

  public void unsetSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  public void setSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
  }

  public int getAttrsSize() {
    return (this.attrs == null) ? 0 : this.attrs.size();
  }

  public void putToAttrs(java.lang.String key, java.lang.String val) {
    if (this.attrs == null) {
      this.attrs = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.attrs.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.String> getAttrs() {
    return this.attrs;
  }

  public Spu setAttrs(java.util.Map<java.lang.String,java.lang.String> attrs) {
    this.attrs = attrs;
    return this;
  }

  public void unsetAttrs() {
    this.attrs = null;
  }

  /** Returns true if field attrs is set (has been assigned a value) and false otherwise */
  public boolean isSetAttrs() {
    return this.attrs != null;
  }

  public void setAttrsIsSet(boolean value) {
    if (!value) {
      this.attrs = null;
    }
  }

  public int getSkusSize() {
    return (this.skus == null) ? 0 : this.skus.size();
  }

  public java.util.Iterator<Sku> getSkusIterator() {
    return (this.skus == null) ? null : this.skus.iterator();
  }

  public void addToSkus(Sku elem) {
    if (this.skus == null) {
      this.skus = new java.util.ArrayList<Sku>();
    }
    this.skus.add(elem);
  }

  public java.util.List<Sku> getSkus() {
    return this.skus;
  }

  public Spu setSkus(java.util.List<Sku> skus) {
    this.skus = skus;
    return this;
  }

  public void unsetSkus() {
    this.skus = null;
  }

  /** Returns true if field skus is set (has been assigned a value) and false otherwise */
  public boolean isSetSkus() {
    return this.skus != null;
  }

  public void setSkusIsSet(boolean value) {
    if (!value) {
      this.skus = null;
    }
  }

  public java.lang.String getComment() {
    return this.comment;
  }

  public Spu setComment(java.lang.String comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public int getCommentsSize() {
    return (this.comments == null) ? 0 : this.comments.size();
  }

  public java.util.Iterator<java.lang.String> getCommentsIterator() {
    return (this.comments == null) ? null : this.comments.iterator();
  }

  public void addToComments(java.lang.String elem) {
    if (this.comments == null) {
      this.comments = new java.util.HashSet<java.lang.String>();
    }
    this.comments.add(elem);
  }

  public java.util.Set<java.lang.String> getComments() {
    return this.comments;
  }

  public Spu setComments(java.util.Set<java.lang.String> comments) {
    this.comments = comments;
    return this;
  }

  public void unsetComments() {
    this.comments = null;
  }

  /** Returns true if field comments is set (has been assigned a value) and false otherwise */
  public boolean isSetComments() {
    return this.comments != null;
  }

  public void setCommentsIsSet(boolean value) {
    if (!value) {
      this.comments = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SPU_ID:
      if (value == null) {
        unsetSpuId();
      } else {
        setSpuId((java.lang.Integer)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((java.lang.Long)value);
      }
      break;

    case WEIGHT:
      if (value == null) {
        unsetWeight();
      } else {
        setWeight((java.lang.Boolean)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((java.lang.Double)value);
      }
      break;

    case ATTRS:
      if (value == null) {
        unsetAttrs();
      } else {
        setAttrs((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case SKUS:
      if (value == null) {
        unsetSkus();
      } else {
        setSkus((java.util.List<Sku>)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((java.lang.String)value);
      }
      break;

    case COMMENTS:
      if (value == null) {
        unsetComments();
      } else {
        setComments((java.util.Set<java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SPU_ID:
      return getSpuId();

    case PRICE:
      return getPrice();

    case WEIGHT:
      return isWeight();

    case SIZE:
      return getSize();

    case ATTRS:
      return getAttrs();

    case SKUS:
      return getSkus();

    case COMMENT:
      return getComment();

    case COMMENTS:
      return getComments();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SPU_ID:
      return isSetSpuId();
    case PRICE:
      return isSetPrice();
    case WEIGHT:
      return isSetWeight();
    case SIZE:
      return isSetSize();
    case ATTRS:
      return isSetAttrs();
    case SKUS:
      return isSetSkus();
    case COMMENT:
      return isSetComment();
    case COMMENTS:
      return isSetComments();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Spu)
      return this.equals((Spu)that);
    return false;
  }

  public boolean equals(Spu that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_spuId = true;
    boolean that_present_spuId = true;
    if (this_present_spuId || that_present_spuId) {
      if (!(this_present_spuId && that_present_spuId))
        return false;
      if (this.spuId != that.spuId)
        return false;
    }

    boolean this_present_price = true;
    boolean that_present_price = true;
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_weight = true;
    boolean that_present_weight = true;
    if (this_present_weight || that_present_weight) {
      if (!(this_present_weight && that_present_weight))
        return false;
      if (this.weight != that.weight)
        return false;
    }

    boolean this_present_size = true;
    boolean that_present_size = true;
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    boolean this_present_attrs = true && this.isSetAttrs();
    boolean that_present_attrs = true && that.isSetAttrs();
    if (this_present_attrs || that_present_attrs) {
      if (!(this_present_attrs && that_present_attrs))
        return false;
      if (!this.attrs.equals(that.attrs))
        return false;
    }

    boolean this_present_skus = true && this.isSetSkus();
    boolean that_present_skus = true && that.isSetSkus();
    if (this_present_skus || that_present_skus) {
      if (!(this_present_skus && that_present_skus))
        return false;
      if (!this.skus.equals(that.skus))
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    boolean this_present_comments = true && this.isSetComments();
    boolean that_present_comments = true && that.isSetComments();
    if (this_present_comments || that_present_comments) {
      if (!(this_present_comments && that_present_comments))
        return false;
      if (!this.comments.equals(that.comments))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + spuId;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(price);

    hashCode = hashCode * 8191 + ((weight) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(size);

    hashCode = hashCode * 8191 + ((isSetAttrs()) ? 131071 : 524287);
    if (isSetAttrs())
      hashCode = hashCode * 8191 + attrs.hashCode();

    hashCode = hashCode * 8191 + ((isSetSkus()) ? 131071 : 524287);
    if (isSetSkus())
      hashCode = hashCode * 8191 + skus.hashCode();

    hashCode = hashCode * 8191 + ((isSetComment()) ? 131071 : 524287);
    if (isSetComment())
      hashCode = hashCode * 8191 + comment.hashCode();

    hashCode = hashCode * 8191 + ((isSetComments()) ? 131071 : 524287);
    if (isSetComments())
      hashCode = hashCode * 8191 + comments.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Spu other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSpuId()).compareTo(other.isSetSpuId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpuId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spuId, other.spuId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWeight()).compareTo(other.isSetWeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, other.weight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAttrs()).compareTo(other.isSetAttrs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttrs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrs, other.attrs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSkus()).compareTo(other.isSetSkus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skus, other.skus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetComments()).compareTo(other.isSetComments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comments, other.comments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Spu(");
    boolean first = true;

    sb.append("spuId:");
    sb.append(this.spuId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    sb.append(this.price);
    first = false;
    if (!first) sb.append(", ");
    sb.append("weight:");
    sb.append(this.weight);
    first = false;
    if (!first) sb.append(", ");
    sb.append("size:");
    sb.append(this.size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("attrs:");
    if (this.attrs == null) {
      sb.append("null");
    } else {
      sb.append(this.attrs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("skus:");
    if (this.skus == null) {
      sb.append("null");
    } else {
      sb.append(this.skus);
    }
    first = false;
    if (isSetComment()) {
      if (!first) sb.append(", ");
      sb.append("comment:");
      if (this.comment == null) {
        sb.append("null");
      } else {
        sb.append(this.comment);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("comments:");
    if (this.comments == null) {
      sb.append("null");
    } else {
      sb.append(this.comments);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpuStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SpuStandardScheme getScheme() {
      return new SpuStandardScheme();
    }
  }

  private static class SpuStandardScheme extends org.apache.thrift.scheme.StandardScheme<Spu> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Spu struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SPU_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spuId = iprot.readI32();
              struct.setSpuIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.price = iprot.readI64();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.weight = iprot.readBool();
              struct.setWeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.size = iprot.readDouble();
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ATTRS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.attrs = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map8.size);
                java.lang.String _key9;
                java.lang.String _val10;
                for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                {
                  _key9 = iprot.readString();
                  _val10 = iprot.readString();
                  struct.attrs.put(_key9, _val10);
                }
                iprot.readMapEnd();
              }
              struct.setAttrsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SKUS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.skus = new java.util.ArrayList<Sku>(_list12.size);
                Sku _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = new Sku();
                  _elem13.read(iprot);
                  struct.skus.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setSkusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COMMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set15 = iprot.readSetBegin();
                struct.comments = new java.util.HashSet<java.lang.String>(2*_set15.size);
                java.lang.String _elem16;
                for (int _i17 = 0; _i17 < _set15.size; ++_i17)
                {
                  _elem16 = iprot.readString();
                  struct.comments.add(_elem16);
                }
                iprot.readSetEnd();
              }
              struct.setCommentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Spu struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SPU_ID_FIELD_DESC);
      oprot.writeI32(struct.spuId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRICE_FIELD_DESC);
      oprot.writeI64(struct.price);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
      oprot.writeBool(struct.weight);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeDouble(struct.size);
      oprot.writeFieldEnd();
      if (struct.attrs != null) {
        oprot.writeFieldBegin(ATTRS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.attrs.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter18 : struct.attrs.entrySet())
          {
            oprot.writeString(_iter18.getKey());
            oprot.writeString(_iter18.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.skus != null) {
        oprot.writeFieldBegin(SKUS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.skus.size()));
          for (Sku _iter19 : struct.skus)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.comment != null) {
        if (struct.isSetComment()) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          oprot.writeString(struct.comment);
          oprot.writeFieldEnd();
        }
      }
      if (struct.comments != null) {
        oprot.writeFieldBegin(COMMENTS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.comments.size()));
          for (java.lang.String _iter20 : struct.comments)
          {
            oprot.writeString(_iter20);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpuTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SpuTupleScheme getScheme() {
      return new SpuTupleScheme();
    }
  }

  private static class SpuTupleScheme extends org.apache.thrift.scheme.TupleScheme<Spu> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Spu struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSpuId()) {
        optionals.set(0);
      }
      if (struct.isSetPrice()) {
        optionals.set(1);
      }
      if (struct.isSetWeight()) {
        optionals.set(2);
      }
      if (struct.isSetSize()) {
        optionals.set(3);
      }
      if (struct.isSetAttrs()) {
        optionals.set(4);
      }
      if (struct.isSetSkus()) {
        optionals.set(5);
      }
      if (struct.isSetComment()) {
        optionals.set(6);
      }
      if (struct.isSetComments()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetSpuId()) {
        oprot.writeI32(struct.spuId);
      }
      if (struct.isSetPrice()) {
        oprot.writeI64(struct.price);
      }
      if (struct.isSetWeight()) {
        oprot.writeBool(struct.weight);
      }
      if (struct.isSetSize()) {
        oprot.writeDouble(struct.size);
      }
      if (struct.isSetAttrs()) {
        {
          oprot.writeI32(struct.attrs.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter21 : struct.attrs.entrySet())
          {
            oprot.writeString(_iter21.getKey());
            oprot.writeString(_iter21.getValue());
          }
        }
      }
      if (struct.isSetSkus()) {
        {
          oprot.writeI32(struct.skus.size());
          for (Sku _iter22 : struct.skus)
          {
            _iter22.write(oprot);
          }
        }
      }
      if (struct.isSetComment()) {
        oprot.writeString(struct.comment);
      }
      if (struct.isSetComments()) {
        {
          oprot.writeI32(struct.comments.size());
          for (java.lang.String _iter23 : struct.comments)
          {
            oprot.writeString(_iter23);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Spu struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.spuId = iprot.readI32();
        struct.setSpuIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.price = iprot.readI64();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.weight = iprot.readBool();
        struct.setWeightIsSet(true);
      }
      if (incoming.get(3)) {
        struct.size = iprot.readDouble();
        struct.setSizeIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map24 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.attrs = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map24.size);
          java.lang.String _key25;
          java.lang.String _val26;
          for (int _i27 = 0; _i27 < _map24.size; ++_i27)
          {
            _key25 = iprot.readString();
            _val26 = iprot.readString();
            struct.attrs.put(_key25, _val26);
          }
        }
        struct.setAttrsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list28 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.skus = new java.util.ArrayList<Sku>(_list28.size);
          Sku _elem29;
          for (int _i30 = 0; _i30 < _list28.size; ++_i30)
          {
            _elem29 = new Sku();
            _elem29.read(iprot);
            struct.skus.add(_elem29);
          }
        }
        struct.setSkusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.comment = iprot.readString();
        struct.setCommentIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TSet _set31 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.comments = new java.util.HashSet<java.lang.String>(2*_set31.size);
          java.lang.String _elem32;
          for (int _i33 = 0; _i33 < _set31.size; ++_i33)
          {
            _elem32 = iprot.readString();
            struct.comments.add(_elem32);
          }
        }
        struct.setCommentsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

